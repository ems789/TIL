# 객체지향 프로그래밍

프로그램을 단순히 데이터와 처리 방법으로 나누는 것이 아니라, 관련된 데이터와 처리 방법을 함께 지니는 객체를 만들고, 그 객체들간의 상호작용으로 로직을 구성하는 프로그래밍 방법.

**객체지향의 요소**

- **캡슐화**
    
    데이터와 처리 방법을 하나로 묶는 것.
    
- **정보 은닉**
    
    프로그램의 세부 구현을 외부로 드러나지 않도록 특정 모듈 내부로 감추는 것.
    
    내부의 구현은 감추고 모듈 내에서의 응집도를 높이며, 외부로의 노출을 최소화하여 모듈 간의 결합도를 떨어뜨려 유연함과 유지보수성을 높이는 개념.
    
    ※ 보통 캡슐화와 정보 은닉을 묶어서 생각하는 경우가 많은데 정보 은닉은 캡슐화로부터 파생된 보조 개념이지 '캡슐화 = 정보은닉'은 아니다.
    
- **상속**
    
    자식 클래스가 부모 클래스의 특성과 기능을 그대로 물려받는 것.
    
- **다형성**
    
    하나의 변수, 또는 함수가 상황에 따라 다른 의미로 해석될 수 있는 것.
    

**객체지향의 장점**

- 상속, 다형성을 통해 코드 재사용을 극대화 시킬 수 있다.
- 다형성을 통해 프로그램을 유연하게 작성할 수 있다.
- 생산성이 높아서 규모가 큰 프로그램에 적합하다.
    
    결합도가 낮아서 코드를 수정하게 돼도 제한된 영역만 수정하면 되기 때문에 유지보수가 편하고 , 재사용성이 높다.
    

**객체지향의 단점**

- 느린 실행 속도
    
    동적 디스패치(혹은 다형성), 가상함수 등을 사용하면 런타임에 그 함수를 찾는데 드는 비용이 발생하게 된다.
